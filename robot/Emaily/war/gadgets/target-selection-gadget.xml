<?xml version="1.0" encoding="UTF-8"?><Module><ModulePrefs title="Wave Emaily Target Selection Gadget"><Require feature="wave" /><Require feature="dynamic-height"/><Require feature="locked-domain"/></ModulePrefs>
<Content type="html"><![CDATA[
<style type="text/css">
	p { margin: 0.2em; font-size: smaller }
</style>
<form name="targetform" id="targetform">
<div id="content_div"><br/></div>
</form>
<script type="text/javascript">

// The 'bind' function is taken from:
// http://code.google.com/p/doctype/source/browse/trunk/goog/base.js
//
// The copyright notice, conditions and disclaimer for the function:
//
// Copyright 2006 Google Inc.
// All Rights Reserved.
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 
//  * Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
//  * Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in
//    the documentation and/or other materials provided with the
//    distribution.
// 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
// FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
// COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
// BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
// LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
// ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE. 

function bind(fn, selfObj, var_args) {
  var boundArgs = fn.boundArgs_;

  if (arguments.length > 2) {
    var args = Array.prototype.slice.call(arguments, 2);
    if (boundArgs) {
      args.unshift.apply(args, boundArgs);
    }
    boundArgs = args;
  }

  selfObj = fn.boundSelf_ || selfObj;
  fn = fn.boundFn_ || fn;

  var newfn;
  var context = selfObj || goog.global;

  if (boundArgs) {
    newfn = function() {
      // Combine the static args and the new args into one big array
      var args = Array.prototype.slice.call(arguments);
      args.unshift.apply(args, boundArgs);
      return fn.apply(context, args);
    };
  } else {
    newfn = function() {
      return fn.apply(context, arguments);
    };
  }

  newfn.boundArgs_ = boundArgs;
  newfn.boundSelf_ = selfObj;
  newfn.boundFn_ = fn;

  return newfn;
};

var EMPTY_RECIPIENT = "---";

// Types of wave recipients from email perspective.
// Format:
//   - Element 0: the value of the recipient type.
//   - Element 1: the visible name of the recipient type.
var recipientTypes = [
	['none', '' ],   // not email recipient
	['to', 'To:'],   // In the 'To:' field of the email
	['cc', 'Cc:']    // In the 'Cc:' field of the email
];

// Reassembles the gadget's main table, which contains the email participants.
function redrawContent() {
    var contentDiv = document.getElementById('content_div');
	var newDiv = document.createElement('div');
	var addableParticipants = [];
	var state = wave.getState();
	if (!state) return;  // Sometimes this function is called too early.
	var participants = wave.getParticipants();
	for (var i = 0; i < participants.length; ++i) {
		var id = participants[i].getId();
		var participantState = state.get('participantState' + id, 'to');
		if (participantState == 'none') {
			addableParticipants.push(id);
		} else {
			var newLine = document.createElement('p');
			var selectObj = document.createElement('select');
			selectObj.onchange = bind(function(userId) {
				userParticipantTypeChange(userId, this.options[this.selectedIndex].value);
			}, selectObj, id);
			for (var j = 0; j < recipientTypes.length; ++j) {
				if (recipientTypes[j][1] == '') continue;
				var optionObj = document.createElement('option');
				optionObj.value = recipientTypes[j][0];
				optionObj.selected = participantState == recipientTypes[j][0];
				optionObj.appendChild(document.createTextNode(recipientTypes[j][1]));
				selectObj.appendChild(optionObj);
			}
			newLine.appendChild(selectObj);
			newLine.appendChild(document.createTextNode(" " + id + " "));
			var removeObj = document.createElement('a');
			removeObj.href = "#";
			removeObj.onclick = bind(function(userId) {
				userParticipantTypeChange(userId, 'none');
				return false;
			}, removeObj, id);
			removeObj.appendChild(document.createTextNode("[x]"));
			newLine.appendChild(removeObj);
			newDiv.appendChild(newLine);
		}
	}
	if (addableParticipants.length) {
		var newLine = document.createElement('p');
		var reAddSelectObj = document.createElement('select');
		reAddSelectObj.onchange = bind(function() {
			userParticipantTypeChange(this.options[this.selectedIndex].value, 'to');
		}, reAddSelectObj);
		var addOptionObj = document.createElement('option');
		addOptionObj.value = EMPTY_RECIPIENT;
		addOptionObj.appendChild(document.createTextNode("Add..."));
		reAddSelectObj.appendChild(addOptionObj);
		for (var i = 0; i < addableParticipants.length; ++i) {
			var id = addableParticipants[i];
			var userOptionObj = document.createElement('option');
			userOptionObj.value = id;
			userOptionObj.appendChild(document.createTextNode(id));
			reAddSelectObj.appendChild(userOptionObj);
		}
		newLine.appendChild(reAddSelectObj);
		newDiv.appendChild(newLine);
	}
	contentDiv.replaceChild(newDiv, contentDiv.childNodes[0]);
	gadgets.window.adjustHeight();
}

// Submits a user participant status change to Wave.
function userParticipantTypeChange(user_id, type) {
	if (user_id == EMPTY_RECIPIENT) return;
	var delta = {}
	delta['participantState' + user_id] = type;
	wave.getState().submitDelta(delta);
}

// Called when the gadget state is updated.
function stateUpdated() {
	redrawContent();
}

// Called when a new participant is added to the wave.
function participantsUpdated() {
	redrawContent();
}

// Initialization function.
function init() {
	if (wave && wave.isInWaveContainer()) {
		wave.setStateCallback(stateUpdated);
        // TODO(dlux): this is going to be done by the robot at some point, so it can be removed here at that time
		wave.setParticipantCallback(participantsUpdated);
	}
}

gadgets.util.registerOnLoadHandler(init);

</script>
]]></Content>
</Module>