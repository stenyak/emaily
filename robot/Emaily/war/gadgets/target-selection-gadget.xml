<?xml version="1.0" encoding="UTF-8"?><Module><ModulePrefs title="Wave Emaily Target Selection Gadget"><Require feature="wave" /><Require feature="dynamic-height"/><Require feature="locked-domain"/></ModulePrefs>
<!--  If the header is exactly 2 lines long, then the javascript errors reported will point to the proper line number in this file. So please keep it that way. --><Content type="html"><![CDATA[
<div id="content_div"">
<form name="targetform" id="targetform">
<table id="target_table">
</table>
</form>

</div>
<script type="text/javascript">


// Types of wave recipients from email perspective.
// Format:
//   - Element 0: the value of the recipient type.
//   - Element 1: the visible name of the recipient type.
var recipientTypes = [
	['none', '' ],   // not email recipient
	['to', 'To:'],   // In the 'To:' field of the email
	['cc', 'Cc:']    // In the 'Cc:' field of the email
];

var targetTable = document.getElementById('target_table');

// Escapes HTML characters.
String.prototype.escapeHTML = function () {
	return(this.replace(/&/g,'&amp;').
				replace(/>/g,'&gt;').
				replace(/</g,'&lt;').
				replace(/"/g,'&quot;'));
};

// the next function is copied from
// http://code.google.com/p/doctype/source/browse/trunk/goog/string/string.js
// Copyright 2006 Google Inc. All Rights Reserved.
// See the referred file for more copyright information.
// Comments are removed.
function subs(str, var_args) {
  for (var i = 1; i < arguments.length; i++) {
    var replacement = String(arguments[i]).replace(/\$/g, '$$$$');
    str = str.replace(/\%s/, replacement);
  }
  return str;
};

// Reassembles the gadget's main table, which contains the email participants.
function redrawTable() {
	var tableHtml = [];
	var addableParticipants = [];
	var state = wave.getState();
	var participants = wave.getParticipants();
	for (var i = 0; i < participants.length; ++i) {
		var id = participants[i].getId();
		var participantState = state.get('participantState' + id, 'to');
		if (participantState == 'none') {
			addableParticipants.push(id);
		} else {
			tableHtml.push(subs('<tr><td><select onChange="typeChanged(this, \'%s\');">', id.escapeHTML()));
			for (var j = 0; j < recipientTypes.length; ++j) {
				if (recipientTypes[j][1] == '') continue;
				var selected = participantState == recipientTypes[j][0] ? 'selected' : '';
				tableHtml.push(subs('<option value="%s" %s>%s', recipientTypes[j][0], selected, recipientTypes[j][1]));
			}
			tableHtml.push(subs('</select> %s <a href="#" onClick="removeParticipant(\'%s\'); return false">[x]</a></td></tr>', id.escapeHTML(), id.escapeHTML()));
		}
	}
	if (addableParticipants.length) {
		tableHtml.push('<tr><td><select onChange="participantAddedByUser(this)">');
		tableHtml.push('<option value="">Add...');
		for (var i = 0; i < addableParticipants.length; ++i) {
			var idHtml = addableParticipants[i].escapeHTML();
			tableHtml.push(subs('<option value="%s">%s', idHtml, idHtml));
		}
		tableHtml.push('</select></td></tr>');
	}
	targetTable.innerHTML = tableHtml.join('');
	gadgets.window.adjustHeight();
}

// Submits a user participant status change to Wave.
function userParticipantTypeChange(user_id, type) {
	var delta = {}
	delta['participantState' + user_id] = type;
	wave.getState().submitDelta(delta);
}

// Removes the participant from the email participant list (sets the participant type to none) 
function removeParticipant(user_id) {
	userParticipantTypeChange(user_id, 'none');
}

// Changes a given participant's type to the selected one.
function typeChanged(select_object, id) {
	userParticipantTypeChange(id, select_object.options[select_object.selectedIndex].value);
}

// Adds back a participant as an email participant which is selected from a dropdown.
function participantAddedByUser(select_object) {
	userParticipantTypeChange(select_object.options[select_object.selectedIndex].value, 'to');
}

// Called when the gadget state is updated.
function stateUpdated() {
	redrawTable();
}

// Called when a new participant is added to the wave.
function participantsUpdated() {
	redrawTable();
}

// Initialization function.
function init() {
	if (wave && wave.isInWaveContainer()) {
		wave.setStateCallback(stateUpdated);
        // TODO(dlux): this is going to be done by the robot at some point, so it can be removed here at that time
		wave.setParticipantCallback(participantsUpdated);
	}
}

gadgets.util.registerOnLoadHandler(init);

</script>
]]></Content>
</Module>